<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleUpdater</name>
    </assembly>
    <members>
        <member name="T:FSLib.App.SimpleUpdater.Defination.CancelableEventArgs">
            <summary>
            表示一个可取消的操作事件参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.CancelableEventArgs.IsCancelled">
            <summary>
            获得或设置一个值，指示当前的操作是否被取消
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.CancelableEventArgs.#ctor">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.Defination.CancelableEventArgs" />  的新实例(CancelableEventArgs)
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.CancelableEventArgs.#ctor(System.Boolean)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.Defination.CancelableEventArgs" />  的新实例(CancelableEventArgs)
            </summary>
            <param name="isCancelled"></param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.IUpdateNotify">
            <summary>
            biaomi
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.IUpdateNotify.Init(FSLib.App.SimpleUpdater.Updater)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.RequestCheckComponentFlagEventArgs">
            <summary>
            要求检测对应组件状态事件的参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.RequestCheckComponentFlagEventArgs.ComponentId">
            <summary>
            组件ID
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.RequestCheckComponentFlagEventArgs.Valid">
            <summary>
            组件状态
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.RequestCheckComponentFlagEventArgs.#ctor(System.String)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.Defination.RequestCheckComponentFlagEventArgs" />  的新实例(RequestCheckComponentFlagEventArgs)
            </summary>
            <param name="compid"></param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult">
            <summary>
            表示检查更新的结果
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult.Success">
            <summary>
            获得是否成功
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult.Error">
            <summary>
            获得是否发生了错误
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult.HasUpdate">
            <summary>
            获得是否有更新
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult.NewVersion">
            <summary>
            获得找到的新版本
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult.Exception">
            <summary>
            获得发生的错误
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Version,System.Exception)">
            <summary>
            构造一个新的 <see cref="T:FSLib.App.SimpleUpdater.Defination.UpdateCheckResult"/> 对象
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.UpdateServerInfo">
            <summary>
            升级服务器信息
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateServerInfo.Url">
            <summary>
            服务器地址模板
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateServerInfo.InfoFileName">
            <summary>
            文件名模板
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateServerInfo.#ctor(System.String,System.String)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.Defination.UpdateServerInfo" />  的新实例(UpdateServerInfo)
            </summary>
            <param name="url"></param>
            <param name="infoFileName"></param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.VersionTooLowException">
            <summary>
            版本过低无法更新异常
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.VersionTooLowException.MinimumVersion">
            <summary>
            需要的最低版本
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.VersionTooLowException.CurrentVersion">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.VersionTooLowException.#ctor(System.Version,System.Version)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.Defination.VersionTooLowException"/> 的新对象
            </summary>
            <param name="currentVersion"></param>
            <param name="minimumVersion"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.WebClientWrapper.GetWebRequest(System.Uri)">
            <summary>
            为指定资源返回一个 <see cref="T:System.Net.WebRequest"/> 对象。
            </summary>
            <returns>
            一个新的 <see cref="T:System.Net.WebRequest"/> 对象，用于指定的资源。
            </returns>
            <param name="address">一个 <see cref="T:System.Uri"/>，用于标识要请求的资源。</param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.PackageInfo">
            <summary> 表示单个文件信息 </summary>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.FilePath">
            <summary> 文件路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.FileSize">
            <summary> 文件大小 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.Version">
            <summary> 版本 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.PackageHash">
            <summary> Hash </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.PackageName">
            <summary> 包名 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.PackageSize">
            <summary> 压缩包文件大小 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.Method">
            <summary> 更新模式 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.VerificationLevel">
            <summary> 获得或设置当前文件验证等级 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.FileHash">
            <summary> 获得或设置本地文件的哈希值 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.Files">
            <summary>
            获得或设置关联的文件
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.ComponentId">
            <summary>
            功能标记。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.PackageInfo.Extract">
            <summary> 解压包 </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.PackageInfo.IncreaseFailureCounter">
            <summary> 增加失败计数 </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.Context">
            <summary> 获得或设置处理用的上下文环境 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.IsDownloading">
            <summary> 获得当前包是否正在下载 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.IsDownloaded">
            <summary> 获得当前包是否已经下载 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.LastError">
            <summary> 获得处理过程中最后发生的错误 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.RetryCount">
            <summary> 获得重试次数计数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.LocalSavePath">
            <summary> 获得本地保存路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.SourceUri">
            <summary> 获得下载的源URL </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.IsLocalFileValid">
            <summary> 获得本地的包文件是否有效 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.PackageInfo.DownloadedSize">
            <summary> 获得已下载的长度 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.PackageInfo.HasVerifyFlag(FSLib.App.SimpleUpdater.Defination.FileVerificationLevel)">
            <summary>
            确定是否有此标记位
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.FileVerificationLevel">
            <summary> 文件验证等级 </summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.FileVerificationLevel.None">
            <summary>
            没有
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.FileVerificationLevel.Size">
            <summary> 验证大小 </summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.FileVerificationLevel.Version">
            <summary> 验证版本 </summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.FileVerificationLevel.Hash">
            <summary> 验证Hash </summary>
            <remarks></remarks>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.UpdateContext">
            <summary> 表示当前更新的上下文环境 </summary>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.MainWindow">
            <summary>
            获得或设置相关联的主窗口。所有的提示界面将会以其为父窗口
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateContext.InitializeCurrentVersion">
            <summary>
            初始化当前的版本信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateContext.TryGetCallingAssembly">
            <summary>
            尝试从程序集中获得升级属性
            </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.PromptUserBeforeAutomaticUpgrade">
            <summary>
            获得或设置是否在正式进行更新前先通知用户
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.IsInUpdateMode">
            <summary> 获得或设置是否正在更新模式中 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateMainFormType">
            <summary>
            主要交互界面
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.AutoEndProcessesWithinAppDir">
            <summary>
            获得或设置一个值，指示着当自动更新的时候是否将应用程序目录中的所有进程都作为主进程请求结束
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.ExternalProcessID">
            <summary>
            外部要结束的进程ID列表
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.ExternalProcessName">
            <summary>
            外部要结束的进程名称
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.Exception">
            <summary>
            获得更新中发生的错误
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateDownloadUrl">
            <summary> 获得或设置下载链接 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateInfoFileName">
            <summary> 获得或设置XML信息文件名 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateAttribute">
            <summary> 获得或设置当前的更新支持信息 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.ApplicationDirectory">
            <summary> 获得或设置当前应用程序的路径 </summary>
            <value></value>
            <remarks>如果设置的是相对路径，那么最终设置的结果将是当前的应用程序目录和设置值组合起来的路径</remarks>
            <exception cref="T:System.ArgumentException">当设置的值是null或空字符串时抛出此异常</exception>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateInfoFileUrl">
            <summary> 获得或设置用于下载更新信息文件的地址 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateContext.GetUpdatePackageFullUrl(System.String)">
            <summary> 获得指定下载包的完整路径 </summary>
            <param name="packageName" type="string">文件名</param>
            <returns>完整路径</returns>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.CurrentVersion">
            <summary> 获得或设置当前的版本 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateInfoTextContent">
            <summary> 获得或设置更新信息文件的文本 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateInfo">
            <summary> 获得或设置当前的更新信息 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.LatestVersion">
            <summary> 获得或设置最后的版本 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.EnableEmbedDialog">
            <summary> 获得或设置是否启用内置的提示对话框 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.IsInUpdating">
            <summary> 获得或设置是否正在进行更新中 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.MultipleDownloadCount">
            <summary> 获得或设置同时下载的文件数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.MaxiumRetryDownloadCount">
            <summary> 获得或设置重试的最大次数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateTempRoot">
            <summary> 获得当前更新的临时目录 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateInfoFilePath">
            <summary> 获得当前更新信息文件保存的路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdatePackageListPath">
            <summary> 获得当前要下载的包文件信息保存的路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.PreserveFileListPath">
            <summary> 获得当前要保留的文件信息保存的路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdatePackagePath">
            <summary> 获得当前下载的包文件目录 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateNewFilePath">
            <summary> 获得当前下载解包后的新文件路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.UpdateRollbackPath">
            <summary> 获得当前更新过程中备份文件的路径 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.IsUpdateInfoDownloaded">
            <summary>
            获得一个值，表示当前的自动升级信息是否已经下载完全
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.NetworkCredential">
            <summary> 获得或设置服务器用户名密码标记 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.ProxyAddress">
            <summary> 获得或设置用于下载的代理服务器地址 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateContext.CreateWebClient">
            <summary> 创建新的WebClient </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.HasUpdate">
            <summary> 获得是否找到更新的标记位 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.CurrentVersionTooLow">
            <summary> 获得表示是否当前版本过低而无法升级的标记位 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.LogFile">
            <summary> 获得或设置日志文件名 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateContext.EnableConsoleLogger(System.Boolean)">
            <summary>
            切换是否启用控制台日志
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.ForceUpdate">
            <summary>
            获得或设置是否不经提示便自动更新
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.MustUpdate">
            <summary>
            获得或设置是否强制更新，否则退出
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.AutoKillProcesses">
            <summary>
            获得或设置是否在更新时自动结束进程
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.AutoExitCurrentProcess">
            <summary>
            获得或设置是否自动退出当前进程
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.HiddenUI">
            <summary>
            是否隐藏所有对话框显示
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.AppendRandomTagInDownloadUrl">
            <summary>
            获得或设置是否在下载地址中附加随机码以避免缓存。默认值：true
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateContext.RandomUrl(System.String)">
            <summary>
            随机化网址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.IsUpdaterSuccessfullyStarted">
            <summary>
            获得更新程序是否已经成功启动了
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.TreatErrorAsNotUpdated">
            <summary>
            设置当出现错误的时候，是否按照有更新但是未更新处理。
            这个选项影响设置必须强制更新的选项。
            如果检测更新遇到错误，此选项设置为false时，则按照“未找到更新”处理；如果此选项设置为true，则按照“有更新但是没有更新”处理，会强制退出软件。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.ComponentStatus">
            <summary>
            获得组件状态
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateContext.AutoClosePreviousPopup">
            <summary>
            获得或设置是否自动关闭之前的找到更新的提示框
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.UpdateMethod">
            <summary> 更新模式 </summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.UpdateMethod.AsProject">
            <summary>
            同项目定义
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.UpdateMethod.Always">
            <summary>总是更新</summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.UpdateMethod.VersionCompare">
            <summary>版本控制</summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.UpdateMethod.SkipIfExists">
            <summary> 如果存在则跳过</summary>
            <remarks></remarks>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.UpdateMethod.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Defination.UpdateMethod.SkipIfNotExist">
            <summary>
            如果不存在则跳过
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Defination.UpdateInfo">
            <summary>
            升级信息的具体包装
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.AppName">
            <summary>
            应用程序名
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.AppVersion">
            <summary>
            应用程序版本
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.PublishUrl">
            <summary>
            发布页面地址
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.FileExecuteBefore">
            <summary>
            更新前执行的程序
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.ExecuteArgumentBefore">
            <summary>
            更新前执行的程序参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.FileExecuteAfter">
            <summary>
            更新后执行的程序
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.ExecuteArgumentAfter">
            <summary>
            更新后执行的程序参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.ExecuteTimeout">
            <summary>
            程序执行超时
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.TreatErrorAsNotUpdated">
            <summary>
            设置当出现错误的时候，是否按照有更新但是未更新处理。
            这个选项影响设置必须强制更新的选项。
            如果检测更新遇到错误，此选项设置为false时，则按照“未找到更新”处理；如果此选项设置为true，则按照“有更新但是没有更新”处理，会强制退出软件。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.PromptUserBeforeAutomaticUpgrade">
            <summary>
            获得或设置是否在正式进行更新前先通知用户
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.AutoCloseSucceedWindow">
            <summary>
            获得或设置当升级成功后是否自动关闭提示对话框
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.Desc">
            <summary>
            更新描述
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.Package">
            <summary>
            安装包文件名
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.MD5">
            <summary>
            校验的HASH
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.DeleteFileLimits">
            <summary>
            要删除或要保留的文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateInfo.GetDeleteFileLimitRuleSet">
            <summary>
            获得删除规则的正则表达式形式
            </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.DeleteMethod">
            <summary>
            删除方式
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.RequiredMinVersion">
            <summary>
            升级需要的最低版本
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.PackageSize">
            <summary>
            包大小
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.UpdaterVersion">
            <summary>
            升级程序版本
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.PackagePassword">
            <summary>
            升级包密码
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.UpdateManifestVersion">
            <summary>获得当前更新文件的版本</summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.ForceUpdate">
            <summary> 是否不提示用户便强制升级 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.Packages">
            <summary> 获得或设置更新包集合 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.HideBeforeExecuteWindow">
            <summary>
            隐藏更新前执行进程的窗口
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.HideAfterExecuteWindow">
            <summary>
            隐藏更新后执行的进程窗口
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.WebUpdateNote">
            <summary>
            获得或设置升级说明的网页路径
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.RtfUpdateNote">
            <summary>
            获得或设置RTF格式的升级说明
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.MustUpdate">
            <summary>
            获得或设置是否必须进行升级,否则拒绝运行
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.AutoExitCurrentProcess">
            <summary>
            获得或设置是否自动退出当前进程
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.AutoEndProcessesWithinAppDir">
            <summary>
            获得或设置一个值，指示着当自动更新的时候是否将应用程序目录中的所有进程都作为主进程请求结束
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.AutoKillProcesses">
            <summary>
            获得或设置是否在更新时自动结束进程
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.ServerCluster">
            <summary>
            获得可用于更新的服务器集群列表
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.UpdatePingUrl">
            <summary>
            获得或设置在进行更新前发送响应的地址
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.PackageUrlTemplate">
            <summary>
             获得用于下载文件包的模板URL。为空则使用默认的
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Defination.UpdateInfo.RequreAdminstrorPrivilege">
            <summary>
            强行请求Administrator权限
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Defination.UpdateInfo.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Defination.UpdateInfo.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.DeletePreviousProgramMethod">
            <summary>
            删除旧的程序文件方式
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.DeletePreviousProgramMethod.None">
            <summary>
            不主动删除仅覆盖
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.DeletePreviousProgramMethod.AllExceptSpecified">
            <summary>
            删除除明确要求保留之外的文件和目录
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.DeletePreviousProgramMethod.NoneButSpecified">
            <summary>
            仅删除明确要求删除的文件和目录
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase">
            <summary>
            可供使用的更新抽象基类
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.InitUpdaterParameter">
            <summary>
            要求初始化请求参数
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.StartUpdate">
            <summary>
            开始检测或正式更新。这步操作将会判断当前状态，并确定是要开始检测还是直接开始下载更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.StartCheckUpdate">
            <summary>
            开始检测更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.StartDownloadUpdate">
            <summary>
            开始正式更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnUpdateCancelled">
            <summary>
            更新已取消
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnUpdatesFound">
            <summary>
            已找到更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRequestCloseApplication(FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs)">
            <summary>
            请求关闭已启动的程序
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnDownloadUpdateInfo">
            <summary>
            正在下载更新信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnDownloadUpdateInfoFinished">
            <summary>
            已完成下载更新信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnNoUpdateFound">
            <summary>
            没有找到更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnError(System.Exception)">
            <summary>
            发生错误
            </summary>
            <param name="ex">错误信息</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnGatheringPackages">
            <summary>
            正在计算下载所需要的压缩包信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnGatheredPackages">
            <summary>
            已经完成计算下载所需要的压缩包信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnUpdateFinished">
            <summary>
            已完成更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnPackageDownload(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            开始下载包
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnPackageDownloadRetry(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            重试下载包
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnPackageDownloadFailed(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            下载包失败
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnPackageDownloadMismatch(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            下载包成功，但是文件不符
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnPackageDownloadFinished(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            下载包失败
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnPackageDownloadProgressChanged(FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs)">
            <summary>
            包下载进度变更
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnDecompressPackage(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            开始解压缩包
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnDecompressPackageFinished(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            解压缩包完成
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnInstallUpdate">
            <summary>
            开始安装更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRemoveFiles">
            <summary>
            正在删除旧文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRemoveFilesFinished">
            <summary>
            删除旧文件完成
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnInstallFiles">
            <summary>
            开始安装更新文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnInstallFilesFinished">
            <summary>
            更新文件安装完成
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnInstallFile(FSLib.App.SimpleUpdater.InstallFileEventArgs)">
            <summary>
            正在安装文件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRemoveFile(FSLib.App.SimpleUpdater.InstallFileEventArgs)">
            <summary>
            正在删除文件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRollbackFiles">
            <summary>
            开始回滚文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRollbackFilesFinished">
            <summary>
            回滚文件完成
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnRollbackFile(FSLib.App.SimpleUpdater.InstallFileEventArgs)">
            <summary>
            正在回滚文件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnExecuteExternalProgramBefore">
            <summary>
            正在运行更新前进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnExecuteExternalProgramAfter">
            <summary>
            正在运行更新后进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnExternalUpdaterStart">
            <summary>
            正在启动外部更新辅助进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnExternalUpdaterStarted">
            <summary>
            外部更新辅助进程已启动
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnMiniumalVersionRequired">
            <summary>
            要求最低版本
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnOperationProgressChanged(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            进度发生变化。此进度包含更新信息下载/文件安装/解压缩等等，但不包含包下载
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.OnExecuteExternalProcess(FSLib.App.SimpleUpdater.RunExternalProcessEventArgs)">
            <summary>
            正在执行外部进程
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.AutoStartUpdate">
            <summary>
            获得或设置是否自动开始更新
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Dialogs.AbstractUpdateBase.UpdaterInstance">
            <summary>
            返回当前的更新实例
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Dialogs.CloseApp.ProcessWrapper.Process">
            <summary>
            关联的进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.CloseApp.ProcessWrapper.#ctor(System.Diagnostics.Process)">
            <summary>
            创建 ProcessWrapper class 的新实例
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.CloseApp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.CloseApp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.CloseApp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.EnsureUpdate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.EnsureUpdate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.EnsureUpdate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.MainWindow.HideAllControls">
            <summary>
            隐藏所有控件
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.MainWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.MainWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.MainWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.MinmumVersionRequired.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.MinmumVersionRequired.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.MinmumVersionRequired.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.ProgramExecuteTimeout.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.ProgramExecuteTimeout.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.ProgramExecuteTimeout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.SelfUpdate.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.SelfUpdate.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.SelfUpdate.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Dialogs.UpdateFound">
            <summary>
            内置的找到更新对话框，表示找到了更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.UpdateFound.#ctor">
            <summary>
              构造函数
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Dialogs.UpdateFound.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.UpdateFound.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Dialogs.UpdateFound.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.HiddenUiUpdateProxy">
            <summary>
            用于隐藏所有UI进行更新的回调类
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.InstallFileEventArgs">
            <summary>
            文件安装事件
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.InstallFileEventArgs.Source">
            <summary>
            获得来源文件
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.InstallFileEventArgs.Destination">
            <summary>
            获得目标文件
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.InstallFileEventArgs.TotalCount">
            <summary> 总数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.InstallFileEventArgs.CurrentCount">
            <summary> 当前的序号 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.InstallFileEventArgs.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.InstallFileEventArgs" /> 的新实例
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.MultiServerUpdater">
            <summary>
            支持多服务器升级的自动升级类
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.MultiServerUpdater.Servers">
            <summary>
            获得当前使用的备用服务器列表
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.MultiServerUpdater.SwitchIfNoUpdatesFound">
            <summary>
            获得或设置当没有找到更新的时候是否也切换服务器地址。默认为 <see langword="false" />
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.MultiServerUpdater.#ctor(System.Version,System.String,FSLib.App.SimpleUpdater.Defination.UpdateServerInfo[])">
            <param name="appVersion">指定的应用程序版本</param>
            <param name="appDirectory">指定的应用程序路径</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.MultiServerUpdater.InitServerInfo">
            <summary>
            初始化服务器信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.MultiServerUpdater.PeekNextServer">
            <summary>
            选择下一个服务器
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.MultiServerUpdater.OnError">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.Error" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.MultiServerUpdater.OnNoUpdatesFound">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.NoUpdatesFound"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.MultiServerUpdater.BeginCheckUpdateInProcess">
            <summary>
            开始检测更新
            </summary>
            <returns>返回是否成功开始检查</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.PackageEventArgs">
            <summary> 表示包文件操作事件数据 </summary>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.PackageEventArgs.Package">
            <summary> 获得当前正在操作的包 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.PackageEventArgs.#ctor(FSLib.App.SimpleUpdater.Defination.PackageInfo)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.PackageEventArgs" />  的新实例(PackageDownloadEventArgs)
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.PackageDownloadException">
            <summary>
                更新包下载错误异常
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.PackageDownloadException.#ctor(FSLib.App.SimpleUpdater.Defination.PackageInfo[])">
            <summary>
                Parameterless (default) constructor
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.PackageDownloadException.ErrorPackages">
            <summary> 获得出错的文件包 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs">
            <summary> 表示包文件下载进度 </summary>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs.Package">
            <summary> 获得当前的包 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary> 表示要接受的总长度 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs.BytesReceived">
            <summary> 表示当前已经接收到的长度 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs.#ctor(FSLib.App.SimpleUpdater.Defination.PackageInfo,System.Int64,System.Int64,System.Int32)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs" />  的新实例(PackageDownloadProgressChangedEventArgs)
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.FileInstaller">
            <summary>
            更新文件安装工作类
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.#ctor">
            <summary>
            文件操作事件类
            </summary>
            <summary>
            创建一个 <see cref="T:FSLib.App.SimpleUpdater.FileInstaller"/> 的新对象
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.Install(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            安装文件
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.UpdateInfo">
            <summary>
            获得或设置更新的信息
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.WorkingRoot">
            <summary>
            获得或设置当前更新程序所工作的目录
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.ApplicationRoot">
            <summary>
            获得或设置应用程序目录
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.SourceFolder">
            <summary>
            安装的源文件夹
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.RollbackPath">
            <summary>
            获得还原路径
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.PreservedFiles">
            <summary>
            获得在安装过程中要保留的文件
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.FileInstaller._bakList">
            <summary>
            备份文件
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.FileInstaller.Exception">
            <summary> 获得安装过程中发生的错误 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.DeleteFileStart">
            <summary>
            开始删除文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnDeleteFileStart">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.DeleteFileStart" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.DeleteFileFinished">
            <summary>
            删除文件完成事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnDeleteFileFinished">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.DeleteFileFinished" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.DeleteFile">
            <summary>
            删除文件事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnDeleteFile(FSLib.App.SimpleUpdater.InstallFileEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.DeleteFile" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.InstallFileStart">
            <summary>
            开始安装文件事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnInstallFileStart">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.InstallFileStart" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.InstallFileFinished">
            <summary>
            完成安装文件事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnInstallFileFinished">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.InstallFileFinished" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.InstallFile">
            <summary>
            安装文件事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnInstallFile(FSLib.App.SimpleUpdater.InstallFileEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.InstallFile" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.RollbackStart">
            <summary>
            回滚文件开始事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnRollbackStart">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.RollbackStart" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.RollbackFinished">
            <summary>
            回滚文件结束事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnRollbackFinished">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.RollbackFinished" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.FileInstaller.RollbackFile">
            <summary>
            回滚文件事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.OnRollbackFile(FSLib.App.SimpleUpdater.InstallFileEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.FileInstaller.RollbackFile" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.DeleteEmptyDirectories">
            <summary>
            删除空目录
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.DeleteEmptyDirectories(System.String,System.Boolean)">
            <summary>
            删除空目录
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.DeletePreviousFile(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            删除原始安装文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.InstallFiles(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            安装文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.DeleteInstalledFiles(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            删除已安装的文件, 并还原原始文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.RollbackFiles(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            回滚备份的文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.FileInstaller.CreateNewFileList">
            <summary>
            创建要安装的新文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Program">
            <summary>
            更新程序的主入口点
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Program.Main(System.String[])">
            <summary>
            应用程序的主入口点。
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:FSLib.App.SimpleUpdater.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:FSLib.App.SimpleUpdater.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs">
            <summary>
            请求关闭进程对话框
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs.Processes">
            <summary>
            获得需要关闭的进程
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs._defaultBehavior">
            <summary>
            调用内建的处理机制
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs.IsCancelled">
            <summary>
            是否取消当前操作
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Diagnostics.Process},System.Action{FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs})">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs" /> 的新实例
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs.CallDefaultBeihavior">
            <summary>
            使用内建的处理模型
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.RunExternalProcessEventArgs">
            <summary>
            外部进程启动的事件参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.RunExternalProcessEventArgs.ProcessStartInfo">
            <summary> 获得将要启动的进程启动参数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.RunExternalProcessEventArgs.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.RunExternalProcessEventArgs" />  的新实例(RunExternalProcessEventArgs)
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Updatable2Attribute">
            <summary>
            表示第二种替换模式的自动更新标记
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updatable2Attribute.UrlTemplate">
            <summary> 获得下载链接模板 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updatable2Attribute.InfoFileName">
            <summary> 获得下载信息文件名 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updatable2Attribute.#ctor(System.String,System.String)">
            <summary>
            创建 <see cref="T:FSLib.App.SimpleUpdater.Updatable2Attribute" />  的新实例(Updatable2Attribute)
            </summary>
            <param name="urlTemplate">下载文件的URL模板，以 {0} 为占位符</param>
            <param name="infoFileName">下载升级信息的文件名</param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Updater">
            <summary>
            自动更新操作类
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.OperationProgressChanged">
            <summary> 操作进度发生变更 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnOperationProgressChanged(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.OperationProgressChanged"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckComponentFlag(System.String)">
            <summary>
            检测组件标记
            </summary>
            <param name="compId">组件ID</param>
            <returns></returns>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.RequestCheckComponentFlag">
            <summary>
            请求检测组件状态位
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnRequestCheckComponentFlag(FSLib.App.SimpleUpdater.Defination.RequestCheckComponentFlagEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.RequestCheckComponentFlag" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.QueryCloseApplication">
            <summary>
            正在关闭主程序
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnQueryCloseApplication(FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.QueryCloseApplication"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.InstallUpdates">
            <summary>
            正在安装更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnInstallUpdates">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.InstallUpdates"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.UpdateFinished">
            <summary>
            已经完成更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnUpdateFinsihed">
            <summary>
            引发 <see cref="!:UpdateFinsihed"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.Error">
            <summary>
            更新中发生错误
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnError">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.Error" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.MinmumVersionRequired">
            <summary>
            不满足最低版本要求
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnMinmumVersionRequired">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.MinmumVersionRequired" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.DownloadUpdateInfo">
            <summary>
            开始下载更新信息文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnDownloadUpdateInfo">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.DownloadUpdateInfo"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.DownloadUpdateInfoFinished">
            <summary>
            结束下载更新信息文件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnDownloadUpdateInfoFinished">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.DownloadUpdateInfoFinished"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.NoUpdatesFound">
            <summary>
            没有发现更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnNoUpdatesFound">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.NoUpdatesFound"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.UpdatesFound">
            <summary>
            发现了更新
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnUpdatesFound">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.UpdatesFound"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.UpdateCancelled">
            <summary>
            更新操作已经被用户取消
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnUpdateCancelled">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.UpdateCancelled" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.CheckUpdateComplete">
            <summary>
            检测更新完成
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnCheckUpdateComplete">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.CheckUpdateComplete"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.GatheringPackages">
            <summary> 确定需要下载的包 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnGatheringPackages">
            <summary> 引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.GatheringPackages"/> 事件 </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.GatheredPackages">
            <summary> 已确定要下载的包 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnGatheredPackages">
            <summary> 引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.GatheredPackages"/> 事件 </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.RunExternalProcess">
            <summary> 启动外部进程 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnRunExternalProcess(FSLib.App.SimpleUpdater.RunExternalProcessEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.RunExternalProcess" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.DownloadProgressChanged">
            <summary> 下载进度发生变化事件 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnDownloadProgressChanged(FSLib.App.SimpleUpdater.PackageDownloadProgressChangedEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.DownloadProgressChanged"/> 事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageDownload">
            <summary> 开始下载指定的包 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageDownload(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageDownload" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageDownloadFinished">
            <summary> 指定的包下载完成 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageDownloadFinished(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageDownloadFinished" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageDownloadFailed">
            <summary> 包下载失败 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageDownloadFailed(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageDownloadFailed" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageHashMismatch">
            <summary> 下载的包Hash不对 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageHashMismatch(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageHashMismatch" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageDownloadRetried">
            <summary> 包重试下载 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageDownloadRetried(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageDownloadRetried" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.ExecuteExternalProcessBefore">
            <summary>
            正在执行安装前进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnExecuteExternalProcessBefore">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.ExecuteExternalProcessBefore" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.ExecuteExternalProcessAfter">
            <summary>
            正在执行安装后进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnExecuteExternalProcessAfter">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.ExecuteExternalProcessAfter" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.RequireTerminateProcess">
            <summary>
            正在中止当前进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnRequireTerminateProcess(System.Object,FSLib.App.SimpleUpdater.Defination.CancelableEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.RequireTerminateProcess" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.ExternalUpdateStart">
            <summary>
            即将启动外部启动更新进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnExternalUpdateStart">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.ExternalUpdateStart" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.ExternalUpdateStarted">
            <summary>
            已经启动外部启动更新进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnExternalUpdateStarted">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.ExternalUpdateStart" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageExtractionBegin">
            <summary> 开始解包 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageExtractionBegin(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageExtractionBegin" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Updater.PackageExtractionEnd">
            <summary> 解包完成 </summary>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.OnPackageExtractionEnd(FSLib.App.SimpleUpdater.PackageEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Updater.PackageExtractionEnd" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckUpdateSync(System.Boolean)">
            <summary>
            同步检查更新
            </summary>
            <param name="enableEmbedDialog">是否启用内置对话框，默认为 <code>true</code>，也就是允许当发现新版本时先弹出提示或进行相关操作。</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckUpdateTask(System.Boolean)">
            <summary>
            任务模式检查更新。任务将会返回新版本号，如果返回null，则意味着没找到新版本。
            </summary>
            <param name="enableEmbedDialog">是否启用内置对话框，默认为 <code>true</code>，也就是允许当发现新版本时先弹出提示或进行相关操作。</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.EnsureNoUpdate(System.Func{System.Nullable{System.Boolean}},System.Action{System.Exception})">
            <summary>
            确认是否有更新，再继续后面的操作。
            </summary>
            <param name="updateFoundAction">发现更新的委托。如果此委托为null或返回null，则显示内置的更新对话框。如果此委托返回true，则启动更新后自动退出；如果此委托返回false，则忽略更新并按照正常的操作流程继续。</param>
            <param name="errorHandler">检查更新发生错误的委托</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.EnsureNoUpdate``1(System.Func{System.Nullable{System.Boolean}},System.Func{System.Exception,System.Boolean},``0)">
            <summary>
            确认是否有更新，再继续后面的操作。
            </summary>
            <typeparam name="T">要显示的UI界面</typeparam>
            <param name="updateFoundAction">发现更新的委托。如果此委托为null或返回null，则显示内置的更新对话框。如果此委托返回true，则启动更新后自动退出；如果此委托返回false，则忽略更新并按照正常的操作流程继续。</param>
            <param name="errorHandler">检查更新发生错误的委托</param>
            <param name="updateUi">用于显示状态的UI界面</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckInitialized">
            <summary>
            确认没有重复调用
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.UpdaterClientVersion">
            <summary>
            获得当前的更新客户端版本
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.Instance">
            <summary>
            当前的更新实例。直接访问本属性将会获得默认创建的Updater实例。要使用更多信息创建，请使用 <see cref="M:FSLib.App.SimpleUpdater.Updater.CreateUpdaterInstance(System.String,System.String)"/> 方法，请确保在使用本属性之前创建。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CreateUpdaterInstance(System.String,System.String)">
            <summary>
            创建自动更新客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CreateUpdaterInstance(FSLib.App.SimpleUpdater.Defination.UpdateServerInfo[])">
            <summary>
            创建自动更新客户端
            </summary>
            <param name="servers">要使用的服务器地址</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CreateUpdaterInstance(System.Boolean,FSLib.App.SimpleUpdater.Defination.UpdateServerInfo[])">
            <summary>
            创建自动更新客户端
            </summary>
            <param name="servers">要使用的服务器地址列表</param>
            <param name="switchIfNoUpdate">当没有找到更新时，是否也切换服务器地址。默认为 <see langword="false"/></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CreateUpdaterInstance(System.Version,System.String,FSLib.App.SimpleUpdater.Defination.UpdateServerInfo[])">
            <summary>
            创建自动更新客户端
            </summary>
            <param name="appVersion">应用程序版本，留空将会使用自动判断</param>
            <param name="appDirectory">应用程序目录，留空将会使用自动判断</param>
            <param name="servers">升级服务器地址</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CreateUpdaterInstance(System.Version,System.String,System.Boolean,FSLib.App.SimpleUpdater.Defination.UpdateServerInfo[])">
            <summary>
            创建自动更新客户端
            </summary>
            <param name="appVersion">应用程序版本，留空将会使用自动判断</param>
            <param name="appDirectory">应用程序目录，留空将会使用自动判断</param>
            <param name="servers">升级服务器地址</param>
            <param name="switchIfNoUpdate">当没有找到更新时，是否也切换服务器地址。默认为 <see langword="false"/></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckUpdateSimple">
            <summary>
            提供一个最简单的自动更新入口
            </summary>
            <returns>返回是否开始检查操作</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckUpdateSimple(System.String)">
            <summary>
            提供一个最简单的自动更新入口
            </summary>
            <param name="updateUrl">更新URL. 如果不传递或传递空的地址, 请使用 <see cref="T:FSLib.App.SimpleUpdater.UpdateableAttribute"/> 属性来标记更新地址</param>
            <returns>返回是否开始检查操作</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CheckUpdateSimple(System.String,System.String)">
            <summary>
            提供一个最简单的自动更新入口
            </summary>
            <param name="templateUrl">更新模板URL. 如果不传递或传递空的地址, 请使用 <see cref="T:FSLib.App.SimpleUpdater.UpdateableAttribute"/> 属性来标记更新地址</param>
            <param name="xmlFileName">更新XML信息文件名</param>
            <returns>返回是否开始检查操作</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.ShowUiForm``1(``0)">
            <summary>
            显示UI窗体
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.DispatchOnUiThread(System.Action{System.Windows.Forms.IWin32Window})">
            <summary>
            调度线程到UI线程
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.Context">
            <summary> 获得当前更新的上下文 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.#ctor(System.Version,System.String)">
            <summary>
            手动创建更新类，并指定当前版本和应用程序目录
            </summary>
            <param name="appVersion">指定的应用程序版本</param>
            <param name="appDirectory">指定的应用程序路径</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.#ctor">
            <summary>
            使用指定的信息类来提供应用程序需要的信息
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing">是否是主动调用</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.Dispose">
            <summary>
            释放资源
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.InitializeParameters">
            <summary>
            初始化工作参数
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.BeginCheckUpdateInProcess">
            <summary>
            开始检测更新
            </summary>
            <returns>返回是否成功开始检查</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.DownloadUpdateInfoInternal(System.Object,FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            下载更新信息
            </summary>
            <exception cref="T:System.ApplicationException">服务器返回了不正确的更新结果</exception>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.GatheringDownloadPackages(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary> 生成下载列表 </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.AddPackageToPreserveList(FSLib.App.SimpleUpdater.Defination.PackageInfo)">
            <summary>
            将指定包的文件添加到忽略列表
            </summary>
            <param name="pkg"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CloseApplication(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            关闭主程序进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.NotifyUserToCloseApp(FSLib.App.SimpleUpdater.QueryCloseApplicationEventArgs)">
            <summary>
            提示用户关闭程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.ReplaceEnvVar(System.String)">
            <summary>
            替换环境变量
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.SetProcessEnvVar(System.Diagnostics.ProcessStartInfo)">
            <summary> 设置启动信息的环境变量 </summary>
            <param name="psi" type="System.Diagnostics.ProcessStartInfo">类型为 <see>System.Diagnostics.ProcessStartInfo</see> 的参数</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.RunExternalProgram(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            执行外部进程
            </summary>
            <param name="program"></param>
            <param name="arguments"></param>
            <param name="waitingForExit">是否等待进程退出</param>
            <param name="hide">是否隐藏进程执行的窗口</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.RunExternalProgramAfter(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            执行外部进程-安装后
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.RunExternalProgramBefore(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            执行外部进程-安装前
            </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.PackagesToUpdate">
            <summary> 获得当前需要下载的升级包列表 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.PackageCount">
            <summary> 获得当前需要下载的升级包数目 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.DownloadedPackageCount">
            <summary> 获得已完成下载的任务个数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.DownloadingPackageCount">
            <summary> 获得正在下载的任务个数 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.DownloadPackages(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary> 执行下载 </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.BeginUpdate">
            <summary>
            开始进行更新
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Updater.FileInstaller">
            <summary> 获得当前用于安装文件的对象 </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.UpdateInternal(System.Object,FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            运行更新进程(主更新进程)
            </summary>
            <exception cref="T:System.InvalidProgramException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.ExtractPackage(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            解开安装包
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.EnsureUpdateStarted">
            <summary>
            确保更新已经启动
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.TerminateProcess(System.Object,System.Int32)">
            <summary>
            强行中止当前进程
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CopyAndStartUpdater(System.String[])">
            <summary>
            复制更新程序到临时目录并启动
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CopyAssemblyToUpdateRoot(System.Reflection.Assembly)">
            <summary>
            复制指定程序集到目录
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.EnsureAdminPrivilege">
            <summary>
            确认当前用户对当前目录是否具有操作权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.FetchProcessList(System.String[])">
            <summary>
            获得自动更新所需要结束的进程列表
            </summary>
            <param name="ownerProcess"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.StartExternalUpdater(System.String[])">
            <summary>
            启动进程外更新程序
            </summary>
            <param name="ownerProcess">主进程列表</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.StartExternalUpdater">
            <summary>
            启动进程外更新程序
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.LoadExtraAssemblies(System.String)">
            <summary>
            加载额外调用
            </summary>
            <param name="namelist"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.UsingAssembly(System.Reflection.Assembly[])">
            <summary>
            引用指定的程序集
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.UsingFormUI``1">
            <summary>
            使用指定的界面作为界面
            </summary>
            <typeparam name="T">界面UI的类型</typeparam>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Updater.CleanTemp">
            <summary>
            清理临时目录
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.SafeQuotePathInCommandLine(System.String)">
            <summary>
            对字符串路径进行转移，以便于正确地在命令行中传递
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.HasMethod(FSLib.App.SimpleUpdater.Defination.UpdateMethod,FSLib.App.SimpleUpdater.Defination.UpdateMethod)">
            <summary>
            测试是否具有指定的更新方式
            </summary>
            <param name="method"></param>
            <param name="targetMethod"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.HasMethod(FSLib.App.SimpleUpdater.Defination.FileVerificationLevel,FSLib.App.SimpleUpdater.Defination.FileVerificationLevel)">
            <summary>
            测试是否具有指定的更新方式
            </summary>
            <param name="method"></param>
            <param name="targetMethod"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.ClearUpdateMethodFlag(FSLib.App.SimpleUpdater.Defination.UpdateMethod,FSLib.App.SimpleUpdater.Defination.UpdateMethod)">
            <summary>
            清除指定的标记位
            </summary>
            <param name="method"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.SetUpdateMethodFlag(FSLib.App.SimpleUpdater.Defination.UpdateMethod,FSLib.App.SimpleUpdater.Defination.UpdateMethod)">
            <summary>
            清除指定的标记位
            </summary>
            <param name="method"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.ClearUpdateMethodFlag(FSLib.App.SimpleUpdater.Defination.FileVerificationLevel,FSLib.App.SimpleUpdater.Defination.FileVerificationLevel)">
            <summary>
            清除指定的标记位
            </summary>
            <param name="method"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Utility.SetUpdateMethodFlag(FSLib.App.SimpleUpdater.Defination.FileVerificationLevel,FSLib.App.SimpleUpdater.Defination.FileVerificationLevel)">
            <summary>
            清除指定的标记位
            </summary>
            <param name="method"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker">
            <summary>
            异步任务提供类
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.#ctor">
            <summary>
            Initializes a new instance of the BackgroundWorker class.
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BackgroundWorker class.
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkerSupportReportProgress">
            <summary>
            获得或设置一个值，表明当前的Worker是否支持报告进度
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WokerSupportCancellation">
            <summary>
            获得或设置一个值，表明当前的Worker是否支持取消
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WokerSupportForceAbort">
            <summary>
            获得或设置一个值，表明当前的Worker是否支持强行终止任务
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.UseWaitCursor">
            <summary>
            获得或设置一个值，表明当前worker忙碌的时候是否将光标设置为忙碌状态
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.IsBusy">
            <summary>
            获得一个值，表明当前的任务是否正在运行中
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.RuntimeData">
            <summary>
            获得运行时数据
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.IsAdminRequired">
            <summary>
            获得或设置当前任务是否需要以管理员模式运行
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.CancellationPending">
            <summary>
            获得或设置一个值，表明当前的任务是否正在取消中
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkerPriority">
            <summary>
            获得或设置线程的优先级
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker._runworkEventArgs">
            <summary>
            当前的事件操作参数
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker._operation">
            <summary>
            异步操作
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkerProgressChanged">
            <summary>
            当工作线程的进度发生变化时触发
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.OnWorkerProgressChanged(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkerProgressChanged"/> 事件
            </summary>
            <param name="e">类型为 <see cref="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs"/> 的事件参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkerThreadAborted">
            <summary>
            当工作线程被强行终止时触发
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.OnWorkerThreadAborted(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkerThreadAborted"/> 事件
            </summary>
            <param name="e">类型为 <see cref="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs"/> 的事件参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkFailed">
            <summary>
            当工作线程失败时触发
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.OnWorkFailed(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkFailed"/> 事件
            </summary>
            <param name="e">类型为 <see cref="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs"/> 的事件参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkCompleted">
            <summary>
            当工作线程完成时触发
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.OnWorkCompleted(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkCompleted"/> 事件
            </summary>
            <param name="e">类型为 <see cref="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs"/> 的事件参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkCancelled">
            <summary>
            当工作任务取消时触发
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.OnWorkCancelled(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WorkCancelled"/> 事件
            </summary>
            <param name="e">类型为 <see cref="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs"/> 的事件参数</param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.DoWork">
            <summary>
            当工作线程开始执行任务时，触发
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.OnDoWork(FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.DoWork"/> 事件
            </summary>
            <param name="e">类型为 <see cref="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs"/> 的事件参数</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.ReportProgress">
            <summary>
            报告进度已经变化
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.RunWorkASync">
            <summary>
            启动任务
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.RunWorkASync(System.Object)">
            <summary>
            使用指定参数来启动任务
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.KillTask">
            <summary>
            强行中止任务
            <para>本方法不通过设置 <see cref="P:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.CancellationPending"/> 来取消任务，而是通过直接中止对应线程来完成操作，因此不推荐使用本方法。</para>
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.WaitForTask(System.Int32)">
            <summary>
            如果任务正在运行，则等待任务完成，直到等待超时
            </summary>
            <param name="timeout">等待时间，超过等待时间则返回。如果设置为0，则会一直等待</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.RunWorkAsyncInternal(System.Object)">
            <summary>
            启动异步执行方法
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.PostEvent(FSLib.App.SimpleUpdater.Wrapper.Action)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.PostEvent(System.Threading.SendOrPostCallback)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.PostEvent(System.EventHandler,System.Object)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="handler">事件回调</param>
            <param name="target">指向引发事件的源对象</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.PostEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="target">指向引发事件的源对象</param>
            <param name="eventArg">包含事件数据</param>
            <param name="handler">回调函数</param>
            <typeparam name="T">事件数据类型</typeparam>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker.PostEvent(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="callback">回调</param>
            <param name="arg">参数</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.DefaultForEmpty(System.String,System.String)">
            <summary>
            为字符串设定默认值
            </summary>
            <param name="value">要设置的值</param>
            <param name="defaultValue">如果要设定的值为空，则返回此默认值</param>
            <returns>设定后的结果</returns>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.SizeLevel">
            <summary>
            控制尺寸显示转换上限
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.Double)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.Double,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.UInt64)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.UInt64,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.Int64)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.Int64,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToSizeDescription(System.Int32,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.Send(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback)">
            <summary>
            同步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> 将指定的序列转换为强类型的List独享 </summary>
            <param name="source" type="System.Collections.Generic.IEnumerable`1">类型为 <see>System.Collections.Generic.IEnumerable`1</see> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.Decompress(System.Byte[])">
            <summary>
            解压缩一个字节流
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.GetFileHash(System.String)">
            <summary> 获得指定文件的Hash值 </summary>
            <param name="filePath" type="string">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary> 计算一个序列中符合指定要求的元素的个数 </summary>
            <param name="source" type="System.Collections.Generic.IEnumerable`1">类型为 <see>System.Collections.Generic.IEnumerable`1</see> 的参数</param>
            <param name="predicate" type="FSLib.App.SimpleUpdater.Wrapper.Func`2">类型为 <see>FSLib.App.SimpleUpdater.Wrapper.Func`2</see> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary> 对序列进行过滤 </summary>
            <param name="source" type="System.Collections.Generic.IEnumerable`1">类型为 <see>System.Collections.Generic.IEnumerable{T}</see> 的参数</param>
            <param name="predicate" type="FSLib.App.SimpleUpdater.Wrapper.Func`2">类型为 <see>FSLib.App.SimpleUpdater.Wrapper.Func{T,bool}</see> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.Where``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary> 对序列进行转换 </summary>
            <param name="source" type="System.Collections.Generic.IEnumerable`1">类型为 <see>System.Collections.Generic.IEnumerable{T}</see> 的参数</param>
            <param name="predicate" type="FSLib.App.SimpleUpdater.Wrapper.Func`2">类型为 <see>FSLib.App.SimpleUpdater.Wrapper.Func{T,bool}</see> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary> 计算一个序列中指定属性之和 </summary>
            <param name="source" type="System.Collections.Generic.IEnumerable`1">类型为 <see>System.Collections.Generic.IEnumerable`1</see> 的参数</param>
            <param name="predicate" type="FSLib.App.SimpleUpdater.Wrapper.Func`2">类型为 <see>FSLib.App.SimpleUpdater.Wrapper.Func`2</see> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.CompareVersion(System.String,System.String)">
            <summary> 比较文件的版本和指定的版本。如果文件版本低于指定版本则返回true </summary>
            <param name="filePath" type="string"></param>
            <param name="version" type="System.Version"></param>
            <returns> bool </returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.ExtensionMethod.ConvertVersionInfo(System.Diagnostics.FileVersionInfo)">
            <summary> 将文件版本信息转换为本地版本信息 </summary>
            <param name="fvi" type="System.Diagnostics.FileVersionInfo">类型为 <see>System.Diagnostics.FileVersionInfo</see> 的参数</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Information(System.String)">
            <summary>
            显示信息对话框
            </summary>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Information(System.String,System.String[])">
            <summary>
            显示信息对话框
            </summary>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Infomation(System.String,System.String,System.String[])">
            <summary>
            显示信息对话框
            </summary>
            <param name="title">要显示的标题</param>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Infomation(System.String,System.String)">
            <summary>
            显示信息对话框
            </summary>
            <param name="title">要显示的标题</param>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Error(System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Error(System.String,System.String[])">
            <summary>
            显示错误对话框
            </summary>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Error(System.String,System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="title">要显示的标题</param>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Error(System.String,System.String,System.String[])">
            <summary>
            显示错误对话框
            </summary>
            <param name="title">要显示的标题</param>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Stop(System.String)">
            <summary>
            显示停止对话框
            </summary>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Stop(System.String,System.String[])">
            <summary>
            显示停止对话框
            </summary>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Stop(System.String,System.String,System.String[])">
            <summary>
            显示停止对话框
            </summary>
            <param name="title">要显示的标题</param>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Stop(System.String,System.String)">
            <summary>
            显示停止对话框
            </summary>
            <param name="title">要显示的标题</param>
            <param name="content">要显示的内容</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Question(System.String)">
            <summary>
            提示对话框
            </summary>
            <param name="content">提示内容</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Question(System.String,System.String[])">
            <summary>
            提示对话框
            </summary>
            <param name="content">提示内容</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Question(System.String,System.Boolean)">
            <summary>
            提示对话框
            </summary>
            <param name="content">提示内容</param>
            <param name="isYesNo">提示内容，true是 “是/否”，false为“确定”、“取消”</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Question(System.String,System.Boolean,System.String[])">
            <summary>
            提示对话框
            </summary>
            <param name="content">提示内容</param>
            <param name="isYesNo">提示内容，true是 “是/否”，false为“确定”、“取消”</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.Question(System.String,System.String,System.Boolean)">
            <summary>
            提示对话框
            </summary>
            <param name="title">标题</param>
            <param name="content">提示内容</param>
            <param name="isYesNo">提示内容，true是 “是/否”，false为“确定”、“取消”</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.QuestionWithCancel(System.String)">
            <summary>
            提示对话框（带有取消）
            </summary>
            <param name="content">提示内容</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.QuestionWithCancel(System.String,System.Object[])">
            <summary>
            提示对话框（带有取消）
            </summary>
            <param name="content">提示内容</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.QuestionWithCancel(System.String,System.String)">
            <summary>
            提示对话框（带有取消）
            </summary>
            <param name="title">标题</param>
            <param name="content">提示内容</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.QuestionWithCancel(System.String,System.String,System.Object[])">
            <summary>
            提示对话框（带有取消）
            </summary>
            <param name="title">标题</param>
            <param name="content">提示内容</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryError(System.String)">
            <summary>
            重试
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryError(System.String,System.Object[])">
            <summary>
            重试
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryError(System.String,System.String)">
            <summary>
            重试
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryError(System.String,System.String,System.Object[])">
            <summary>
            重试
            </summary>
            <param name="title">显示的标题</param>
            <param name="content">提示的内容</param>
            <param name="param">如果提示的内容中有占位符,则使用此参数进行格式化</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryCommon(System.String)">
            <summary>
            重试
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryCommon(System.String,System.String,System.Object[])">
            <summary>
            重试
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.FunctionalForm.RetryCommon(System.String,System.String)">
            <summary>
            重试
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs">
            <summary>
            任务运行事件数据
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.Argument">
            <summary>
            运行参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.Result">
            <summary>
            运行结果
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.Exception">
            <summary>
            运行中出现的错误
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.Thread">
            <summary>
            正在运行任务的线程
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.Progress">
            <summary>
            当前任务运行的进度
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.CancellationPending">
            <summary>
            获得或取得一个值，表明当前任务是否已经声明取消
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.Succeed">
            <summary>
            获得或设置一个值，表明当前正在执行的任务是否成功完成
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs._worker">
            <summary>
            当前的任务管理对象
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.#ctor(FSLib.App.SimpleUpdater.Wrapper.BackgroundWorker)">
            <summary>
            Initializes a new instance of the RunworkEventArgs class.
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify">
            <summary>
            进度声明类
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify.TaskCount">
            <summary>
            任务总数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify.TaskProgress">
            <summary>
            任务进度
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify.TaskPercentage">
            <summary>
            获得或设置任务进度的百分比
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify.StateMessage">
            <summary>
            进度信息
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify.UserState">
            <summary>
            用户自定义进度对象
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ProgressIdentify.Reset">
            <summary>
            重置当前进度的状态
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ReportProgress(System.Int32)">
            <summary>
            报告当前进度变化
            </summary>
            <param name="currentTaskIndex">当前任务索引</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ReportProgress(System.Int32,System.Int32)">
            <summary>
            报告当前进度变化
            </summary>
            <param name="taskCount">任务总数</param>
            <param name="currentTaskIndex">当前任务索引</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ReportProgress(System.Int32,System.Int32,System.String)">
            <summary>
            报告当前进度变化
            </summary>
            <param name="taskCount">任务总数</param>
            <param name="currentTaskIndex">当前任务索引</param>
            <param name="stateMessage">状态信息</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.ReportProgress(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            报告当前进度变化
            </summary>
            <param name="taskCount">任务总数</param>
            <param name="currentTaskIndex">当前任务索引</param>
            <param name="stateMessage">状态信息</param>
            <param name="userState">自定义进度数据</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.PostEvent(FSLib.App.SimpleUpdater.Wrapper.Action)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.PostEvent(System.Threading.SendOrPostCallback)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.PostEvent(System.EventHandler,System.Object)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="handler">事件回调</param>
            <param name="target">指向引发事件的源对象</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.PostEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="target">指向引发事件的源对象</param>
            <param name="eventArg">包含事件数据</param>
            <param name="handler">回调函数</param>
            <typeparam name="T">事件数据类型</typeparam>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.RunworkEventArgs.PostEvent(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            向异步操作提交事件
            </summary>
            <param name="callback">回调</param>
            <param name="arg">参数</param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent">
            <summary>
            滑动窗口组件
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyXDirection">
            <summary>
            横向动画方向
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyXDirection.LeftToRight">
            <summary>
            从左到右
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyXDirection.RightToLeft">
            <summary>
            从右向左
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyXDirection.None">
            <summary>
            无动画
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyYDirection">
            <summary>
            纵向动画方向
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyYDirection.TopToBottom">
            <summary>
            从上向下
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyYDirection.BottomToTop">
            <summary>
            从下向上
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.FlyYDirection.None">
            <summary>
            无动画
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.DirectY">
            <summary>
            Y方向运动方向，True为从上向下
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.MoveSpeedX">
            <summary>
            运行的速度(X)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.MoveSpeedY">
            <summary>
            运行的速度(Y)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.TimerInterval">
            <summary>
            定时器间隔
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.x_To">
            <summary>
            窗体动画终点X值
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.y_To">
            <summary>
            窗体动画终点Y值
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.x_From">
            <summary>
            窗口运行的起点X值
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.y_Form">
            <summary>
            窗口运动的起点Y值
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.AttachedForm">
            <summary>
            要控制的装体
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideInEnable">
            <summary>
            是否允许滑入动画
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideOutEnable">
            <summary>
            是否允许滑出动画
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.AlwaysSetLocation">
            <summary>
            总是设置窗体初始位置，哪怕是关闭了滑动动画
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideDirection">
            <summary>
            滑动方向
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideDirection.SlideIn">
            <summary>
            滑入
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideDirection.SlideOut">
            <summary>
            滑出
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideFinishedEventArgs">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideFinishedEventArgs.Direction">
            <summary>
            滑动方向
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideBeginEventHandler">
            <summary>
            开始滑动
            </summary>
            <param name="??"></param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideEndEventHandler">
            <summary>
            滑动结束
            </summary>
            <param name="??"></param>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideBegin">
            <summary>
            开始滑动事件
            </summary>
        </member>
        <member name="E:FSLib.App.SimpleUpdater.Wrapper.SlideComponent.SlideEnd">
            <summary>
            滑动结束
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Wrapper.XMLSerializeHelper">
            <summary>
            XML序列化支持类
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.XMLSerializeHelper.XmlDeserializeFromString``1(System.String)">
            <summary>
            序列化对象为文本
            </summary>
            <returns>保存信息的 <see cref="T:System.String"/></returns>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.Wrapper.XMLSerializeHelper.XmlSerilizeToFile(System.Object,System.String)">
            <summary>
            序列化对象到文件
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <param name="fileName">保存到的目标文件</param>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources._16px_loading_1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.appconfig">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.AUTOMATIC_UPDATES_16x16_32">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.block_16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.cou_16_warning">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.cou_32_refresh">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.FSLib_App_Utilities_exe">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.Properties.Resources.Info">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.SR">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.ClosingApplications">
            <summary>
              查找类似 正在请求关闭应用程序... 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.ComputingFileInfo">
            <summary>
              查找类似 正在计算要下载的文件信息…… 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.DeleteOriginalFiles">
            <summary>
              查找类似 正在删除原始文件... 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.DonotRunMeDirectly">
            <summary>
              查找类似 我是用来自动更新的，不要直接拿鼠标戳我嘛 -.- 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.DownloadPackage">
            <summary>
              查找类似 正在下载升级包…… 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.DownloadProgress">
            <summary>
              查找类似 下载中...{0}/{1} ({2}/{3}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Error">
            <summary>
              查找类似 错误 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Ex_VersionTooLow">
            <summary>
              查找类似 当前的更新要求最低版本为 {0}，已安装版本为 {1}，请手动更新。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.ExecuteExternal">
            <summary>
              查找类似 正在执行外部进程..... 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.ExtractPackage">
            <summary>
              查找类似 正在解压缩升级包…… 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.InstallNewFiles">
            <summary>
              查找类似 正在安装新文件... 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.InstallPackages">
            <summary>
              查找类似 正在安装升级包... 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Message">
            <summary>
              查找类似 信息 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.MinmumVersionRequired_Desc">
             <summary>
               查找类似 升级要求最低版本：{0}
            您当前已安装版本：{1}
            
            您已安装版本过低无法继续运行，请手动下载最新版并重新安装。
            软件将会自动退出。 的本地化字符串。
             </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Unknown">
            <summary>
              查找类似 未知 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.UpdateFound_EstimateDownloadSize">
            <summary>
              查找类似 预计下载大小：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_AssemblyNotMarkedAsUpdateable">
            <summary>
              查找类似 程序集未标记为可更新，无法确定更新地址 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_AutomaticUpgradeTipForce">
             <summary>
               查找类似 将会自动升级 {0} (版本 {1}) 到 版本 {2}，请等待升级完成。
            
            如果无法升级，软件将无法使用。 的本地化字符串。
             </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_AutomaticUpgradeTipNotForce">
            <summary>
              查找类似 将会自动升级 {0} (版本 {1}) 到 版本 {2}，请等待升级完成。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_ExtractingFile">
            <summary>
              查找类似 正在解压缩 {0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_InstallFileError">
            <summary>
              查找类似 安装文件 {0} 到 {1} 时发生错误：{2} 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_UnableToCheckUpdate">
            <summary>
              查找类似 无法检查更新，错误：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.Updater_UpdateCanceledByCloseApp">
            <summary>
              查找类似 自动更新因为未能关闭正在运行的程序而中止 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.UpdatesFound_CriticalUpdateWarning">
             <summary>
               查找类似 当前更新是关键更新，如果不安装此更新，软件将无法继续运行。
            
            确定要关闭此更新吗？ 的本地化字符串。
             </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.SR.UpdatesFound_Tip">
            <summary>
              查找类似 亲，『{1}』可以升级到 {0} 了喔，现在就动手呗？ 的本地化字符串。
            </summary>
        </member>
        <member name="T:FSLib.App.SimpleUpdater.UpdateableAttribute">
            <summary>
            一个自定义属性，表示当前的应用程序支持自动更新
            </summary>
        </member>
        <member name="P:FSLib.App.SimpleUpdater.UpdateableAttribute.UpdateUrl">
            <summary>
            获得一个值，表示当前应用程序定义的升级信息路径
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateableAttribute.#ctor(System.String)">
            <summary>
            创建 UpdateableAttribute class 的新实例
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.ControlBase.HideControls">
            <summary>
            请求主窗体隐藏所有控件
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.UpdateControl.DownloadingInfo.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.DownloadingInfo.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.DownloadingInfo.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.UpdateControl.NoUpdateFound.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.NoUpdateFound.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.NoUpdateFound.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.UpdateControl.RunUpdate.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.RunUpdate.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.RunUpdate.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.UpdateControl.UpdateError.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.UpdateError.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.UpdateError.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="F:FSLib.App.SimpleUpdater.UpdateControl.UpdateFinished.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.UpdateFinished.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:FSLib.App.SimpleUpdater.UpdateControl.UpdateFinished.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ScanEventArgs.Name">
            <summary>
            The fie or directory name for this event.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs">
            <summary>
            Event arguments during processing of a single file or directory.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name if known.</param>
            <param name="processed">The number of bytes processed so far</param>
            <param name="target">The total number of bytes to process, 0 if not known</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.Name">
            <summary>
            The name for this event if known.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating wether scanning should continue or not.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.PercentComplete">
            <summary>
            Get a percentage representing how much of the <see cref="P:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.Target"></see> has been processed
            </summary>
            <value>0.0 to 100.0 percent; 0 if target is not known.</value>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.Processed">
            <summary>
            The number of bytes processed so far
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ProgressEventArgs.Target">
            <summary>
            The number of bytes to process.
            </summary>
            <remarks>Target may be 0 or negative if the value isnt known.</remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.ProcessDirectoryHandler">
            <summary>
            Delegate invoked before starting to process a directory.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.ProcessFileHandler">
            <summary>
            Delegate invoked before starting to process a file.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.ProgressHandler">
            <summary>
            Delegate invoked during processing of a file or directory
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.CompletedFileHandler">
            <summary>
            Delegate invoked when a file has been completely processed.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.DirectoryFailureHandler">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.FileFailureHandler">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter"> directory filter</see> to apply.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.#ctor(ICCEmbedded.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICCEmbedded.SharpZipLib.Core.IScanFilter">filter</see> to apply.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.#ctor(ICCEmbedded.SharpZipLib.Core.IScanFilter,ICCEmbedded.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICCEmbedded.SharpZipLib.Core.IScanFilter">filter</see>  to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:ICCEmbedded.SharpZipLib.Core.IScanFilter">filter</see>  to apply.</param>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has finished.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.OnCompleteFile(System.String)">
            <summary>
            Raise the complete file event
            </summary>
            <param name="file">The file name</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Core.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'
            Each expression can be prefixed by a plus '+' sign or a minus '-' sign to denote the expression
            is intended to include or exclude names.  If neither a plus or minus sign is found include is the default
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:ICCEmbedded.SharpZipLib.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.NameFilter">filter</see> expression to apply.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Core.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],ICCEmbedded.SharpZipLib.Core.ProgressHandler,System.TimeSpan,System.Object,System.String)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:ICCEmbedded.SharpZipLib.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Core.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:ICCEmbedded.SharpZipLib.Core.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.SharpZipBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipBaseException class.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipBaseException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            At least one frequency is non-zero
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICCEmbedded.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICCEmbedded.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(ICCEmbedded.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="!:ICCEmbedded.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICCEmbedded.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICCEmbedded.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name ="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is less than zero
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICCEmbedded.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICCEmbedded.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:ICCEmbedded.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.Progress">
            <summary>
            Delegate to invoke during processing of files.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has been completed.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raises the <see cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.FileFailure">file failure delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Fires the <see cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.ProcessFile">Process File delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.OnCompletedFile(System.String)">
            <summary>
            Fires the CompletedFile delegate
            </summary>
            <param name="file">The file whose processing has been completed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files as determined by the current filter.</param>
            <returns>A <see cref="T:System.Boolean"/> of true if the operation should continue; false otherwise.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.ProgressInterval">
            <summary>
            The minimum timespan between <see cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.Progress"/> events.
            </summary>
            <value>The minimum period of time between <see cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.Progress"/> events.</value>
            <seealso cref="F:ICCEmbedded.SharpZipLib.Zip.FastZipEvents.Progress"/>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.FastZip"/>.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.#ctor(ICCEmbedded.SharpZipLib.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.FastZip"/>
            </summary>
            <param name="events">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.FastZipEvents">events</see> to use during operations.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:ICCEmbedded.SharpZipLib.Core.INameTransform"></see> active when creating Zip files.
            </summary>
            <seealso cref="P:ICCEmbedded.SharpZipLib.Zip.FastZip.EntryFactory"></seealso>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:ICCEmbedded.SharpZipLib.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.FastZip.RestoreAttributesOnExtract">
            <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:ICCEmbedded.SharpZipLib.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,ICCEmbedded.SharpZipLib.Zip.FastZip.Overwrite,ICCEmbedded.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICCEmbedded.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating wether to restore the date and time for extracted files.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns>Returns a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system if the file exists.</param>
            <returns>Returns a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns>Returns a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system for this directory if it exists.</param>
            <returns>Returns a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:ICCEmbedded.SharpZipLib.Core.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RCS has been used for encryption.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CanDecompress"/>.
            </remarks>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="!:ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:ICCEmbedded.SharpZipLib.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,ICCEmbedded.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or > 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            <br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-10: Unused or reserved<br/>
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br/>
            Bit 12-15: Unused or reserved<br/>
            </remarks>
            <seealso cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsUnicodeText"></seealso>
            <seealso cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsCrypted"></seealso>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
            <remarks>This is only valid when the entry is part of a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"></see></remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
            <seealso cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CanDecompress"></seealso>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating wether this entry can be decompressed by the library.
            </summary>
            <remarks>This is based on the <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value of true if Zip64 extensions have been forced on; false if not.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value of true if a local header requires Zip64 extensions; false if not.</value>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime value.
            </summary>
            <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <remarks>
            The <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform"/> class, or <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
            <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICCEmbedded.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> class.
            The <see cref="!:ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
            <returns>An <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets a string representation of this ZipEntry.
            </summary>
            <returns>A readable textual representation of this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/></returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.IsCompressionMethodSupported(ICCEmbedded.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">The name to clean</param>
            <returns>The 'cleaned' name.</returns>
            <remarks>
            The <seealso cref="T:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory">
            <summary>
            Basic implementation of <see cref="T:ICCEmbedded.SharpZipLib.Zip.IEntryFactory"></see>
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or 
            using the <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.
            The <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime"/> property can also be used to set this value.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:ICCEmbedded.SharpZipLib.Core.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting">time setting</see> to use when creating <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">Zip entries</see>.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:ICCEmbedded.SharpZipLib.Core.INameTransform"/> to be used when creating new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> values.
            </summary>
            <remarks>
            Setting this property to null will cause a default <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform">name transform</see> to be used.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.Setting">
            <summary>
            Get / set the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.Setting"/> is set to <see cref="F:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes are to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.IsUnicodeText">
            <summary>
            Get set a value indicating wether unidoce text should be set on.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> from a name.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Make a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <returns>Returns a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ITaggedData">
            <summary>
            ExtraData tagged value interface.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ITaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the contents of this instance from the data passed.
            </summary>
            <param name="data">The data to extract contents from.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ITaggedData.GetData">
            <summary>
            Get the data representing this instance.
            </summary>
            <returns>Returns the data for this instance.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.RawTaggedData">
            <summary>
            A raw binary tagged value
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.RawTaggedData.#ctor(System.Int16)">
            <summary>
            Initialise a new instance.
            </summary>
            <param name="tag">The tag ID.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.RawTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="offset">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.RawTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.RawTaggedData.Data">
            <summary>
            Get /set the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.RawTaggedData.tag_">
            <summary>
            The tag ID for this instance.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData">
            <summary>
            Class representing extended unix date time values.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.Flags">
            <summary>
            Flags indicate which values are included in this instance.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.Flags.ModificationTime">
            <summary>
            The modification time is included
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.Flags.AccessTime">
            <summary>
            The access time is included
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.Flags.CreateTime">
            <summary>
            The create time is included.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.TagID">
            <summary>
            Get the ID
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.ModificationTime">
            <summary>
            Get /set the Modification Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.AccessTime">
            <summary>
            Get / set the Access Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.CreateTime">
            <summary>
            Get / Set the Create Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.Include">
            <summary>
            Get/set the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.NTTaggedData">
            <summary>
            Class handling NT date time values.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.LastModificationTime">
            <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.CreateTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">create time</see>
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.NTTaggedData.LastAccessTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ITaggedDataFactory">
            <summary>
            A factory that creates <see cref="T:ICCEmbedded.SharpZipLib.Zip.ITaggedData">tagged data</see> instances.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ITaggedDataFactory.Create(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get data for a specific tag value.
            </summary>
            <param name="tag">The tag ID to find.</param>
            <param name="data">The data to search.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
            <returns>The located <see cref="T:ICCEmbedded.SharpZipLib.Zip.ITaggedData">value found</see>, or null if not found.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipExtraData">
            
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.GetData(System.Int16)">
            <summary>
            Get the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>Returns a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only value if <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previsouly returned true.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially it will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadInt"/>, <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadShort"/> and <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddEntry(ICCEmbedded.SharpZipLib.Zip.ITaggedData)">
            <summary>
            Add a new entry to extra data.
            </summary>
            <param name="taggedData">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ITaggedData"/> value to add.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddEntry(ICCEmbedded.SharpZipLib.Zip.ITaggedData)"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Get the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Get/set the key value
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.TestStatus">
            <summary>
            Status returned returned by <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.TestStatus.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:ICCEmbedded.SharpZipLib.Zip.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.TestStatus.File">
            <summary>
            Get the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICCEmbedded.SharpZipLib.Zip.TestStrategy,ICCEmbedded.SharpZipLib.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:ICCEmbedded.SharpZipLib.Zip.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICCEmbedded.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <param name="name">The name of the file to open.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileStream"/> to read archive data from.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read archive data from.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/></returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/></returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Gets an enumerator for the Zip entries in this Zip file.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> for this archive.</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetInputStream(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Gets an input stream for reading the given zip entry data in an uncompressed form.
            Normally the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> should be an entry returned by GetEntry().
            </summary>
            <param name="entry">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> to obtain a data <see cref="T:System.IO.Stream"/> for</param>
            <returns>An input <see cref="T:System.IO.Stream"/> containing data for this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/></returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input <see cref="T:System.IO.Stream"/> containing data for this <paramref name="entryIndex"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean,ICCEmbedded.SharpZipLib.Zip.TestStrategy,ICCEmbedded.SharpZipLib.Zip.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.TestLocalHeader(ICCEmbedded.SharpZipLib.Zip.ZipEntry,ICCEmbedded.SharpZipLib.Zip.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:ICCEmbedded.SharpZipLib.Core.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.EntryFactory">
            <summary>
            Get/set the <see cref="T:ICCEmbedded.SharpZipLib.Zip.IEntryFactory"/> used to generate <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> values
            during updates.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate(ICCEmbedded.SharpZipLib.Zip.IArchiveStorage,ICCEmbedded.SharpZipLib.Zip.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate(ICCEmbedded.SharpZipLib.Zip.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> archive.
            </summary>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate(ICCEmbedded.SharpZipLib.Zip.IArchiveStorage)"/>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(System.String,ICCEmbedded.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(System.String,ICCEmbedded.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(ICCEmbedded.SharpZipLib.Zip.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(ICCEmbedded.SharpZipLib.Zip.IStaticDataSource,System.String,ICCEmbedded.SharpZipLib.Zip.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(ICCEmbedded.SharpZipLib.Zip.IStaticDataSource,System.String,ICCEmbedded.SharpZipLib.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Add(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Add a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Delete(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Delete a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetDescriptorSize(ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.GetOutputStream(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.  Null if none exists.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.LocateEntry(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.IsSourceString">
            <summary>
            Get a value indicating the original source of data for this instance.
            True if the source was a string; false if the source was binary data.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString.op_Implicit(ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="zipString">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The textual equivalent for the input value.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.ZipEntryEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator">enumerator</see> for <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry">Zip entries</see>
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream"/> is an <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="baseStream">The underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream.SkipBytes(System.Int64)">
            <summary>
            Skip the specified number of input bytes.
            </summary>
            <param name="count">The maximum number of input bytes to skip.</param>
            <returns>The actuial number of input bytes skipped.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IStaticDataSource.GetSource">
            <summary>
            Get a source of data by creating a new stream.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.IDynamicDataSource">
            <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IDynamicDataSource.GetSource(ICCEmbedded.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:ICCEmbedded.SharpZipLib.Zip.IStaticDataSource"/> for use with files stored on disk.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:ICCEmbedded.SharpZipLib.Zip.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:ICCEmbedded.SharpZipLib.Zip.IDynamicDataSource"/> for files stored on disk.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DynamicDiskDataSource.GetSource(ICCEmbedded.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:ICCEmbedded.SharpZipLib.Zip.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.#ctor(ICCEmbedded.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to open for direct update.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage">
            <summary>
            An <see cref="T:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipFile,ICCEmbedded.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.#ctor(ICCEmbedded.SharpZipLib.Zip.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="current">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="current"/> stream is not null this is used as is.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage">
            <summary>
            An <see cref="T:ICCEmbedded.SharpZipLib.Zip.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.#ctor(ICCEmbedded.SharpZipLib.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:ICCEmbedded.SharpZipLib.Zip.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The original source stream</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="stream"/> passed is not null this is used;
            otherwise a new <see cref="T:System.IO.MemoryStream"/> is returned.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.DescriptorData">
            <summary>
            Holds data pertinent to a data descriptor.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.DescriptorData.CompressedSize">
            <summary>
            Get /set the compressed size of data.
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.DescriptorData.Size">
            <summary>
            Get / set the uncompressed size of data
            </summary>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.DescriptorData.Crc">
            <summary>
            Get /set the crc value.
            </summary>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            The underlying stream is closed only if <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.IsStreamOwner"/> is true.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Locates a block with the desired <paramref name="signature"/>.
            </summary>
            <param name="signature">The signature to find.</param>
            <param name="endLocation">Location, marking the end of block.</param>
            <param name="minimumBlockSize">Minimum size of the block.</param>
            <param name="maximumVariableData">The maximum variable data.</param>
            <returns>Eeturns the offset of the first byte after the signature; -1 if not found</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.WriteDataDescriptor(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Write a data descriptor.
            </summary>
            <param name="entry">The entry to write a descriptor for.</param>
            <returns>Returns the number of descriptor bytes written.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipHelperStream.ReadDataDescriptor(System.Boolean,ICCEmbedded.SharpZipLib.Zip.DescriptorData)">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
            <param name="zip64">if set to <c>true</c> [zip64].</param>
            <param name="data">The data to fill in.</param>
            <returns>Returns the number of bytes read in the descriptor.</returns>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from front of paths if found.</param>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
            <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to force valid</param>
            <param name="replacement">The replacement character to use.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="T:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using ICCEmbedded.SharpZipLib.Core;
             using ICCEmbedded.SharpZipLib.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets a flag value of true if the central header has been added for this archive; false if it has not been added.
            </summary>
            <remarks>No further entries can be added once this has been done.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment text for the entire archive.
            </param>
            <exception name ="ArgumentOutOfRangeException">
            The converted comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  The new level will be activated
            immediately.
            </summary>
            <param name="level">The new compression level (1 to 9).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICCEmbedded.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflater compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="P:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
            <remarks>Older archivers may not understand Zip64 extensions.
            If backwards compatability is an issue be careful when adding <see cref="P:ICCEmbedded.SharpZipLib.Zip.ZipEntry.Size">entries</see> to an archive.
            Setting this property to off is workable but less desirable as in those circumstances adding a file
            larger then 4GB will fail.</remarks>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICCEmbedded.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">Archive size is invalid</exception>
            <exception cref="T:System.InvalidOperationException">No entry is active.</exception>
        </member>
        <member name="M:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICCEmbedded.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.entries">
            <summary>
            The entries for the archive.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.crc">
            <summary>
            Used to track the crc of data added to entries.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.curEntry">
            <summary>
            The current entry being added.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.zipComment">
            <summary>
            Comment for the entire archive recorded in central header.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.patchEntryHeader">
            <summary>
            Flag indicating that header patching is required for the current entry.
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.crcPatchPos">
            <summary>
            Position to patch crc
            </summary>
        </member>
        <member name="F:ICCEmbedded.SharpZipLib.Zip.ZipOutputStream.sizePatchPos">
            <summary>
            Position to patch size.
            </summary>
        </member>
    </members>
</doc>
